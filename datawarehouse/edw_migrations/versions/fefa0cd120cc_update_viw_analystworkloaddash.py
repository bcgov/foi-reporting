"""update_viw_analystworkloaddash

Revision ID: fefa0cd120cc
Revises: b98bd07cd6e8
Create Date: 2022-03-17 13:44:12.569296

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'fefa0cd120cc'
down_revision = 'b98bd07cd6e8'
branch_labels = None
depends_on = None


def upgrade():
    op.execute('DROP VIEW public.viw_analystworkloaddash; CREATE OR REPLACE VIEW public.viw_analystworkloaddash AS  SELECT r.foirequestid,    r.visualrequestfilenumber AS requestid,        CASE            WHEN ecg.groupname::text = \'Consolidated Intake\'::text THEN \'Intake\'::character varying            ELSE ecggn.groupname        END AS team,        CASE            WHEN ecg.groupname::text = \'Consolidated Intake\'::text THEN ecg.groupdescription            ELSE ecggn.groupdescription        END AS manager,    rd.ministry,    eco.officecode AS procorg,    rd.applicantcategoryid AS category,    rt.requesttypename AS type,    rqt.requestertypename AS applicanttype,    (req.lastname::text || \', \'::text) || req.firstname::text AS applicantname,    frccf.subject,    rd.startdate,    rd.closeddate AS enddate,    rd.targetdate AS duedate,    rd.processeddays AS totalprocesseddays,    rd.currentactivity,    frccf.currentactivitydate,    rd.primaryusername AS analyst,    frccf.crossgovtno,    rd.requestdescription AS description,    rd.status,	frccf.customfieldstatus as "Custom Status",    frccf.countontime,    frccf.countoverdue,    frccf.onholddays,    frccf.daysoverdue,        CASE            WHEN rd.requeststatus::text = \'Closed\'::text THEN \'Closed\'::text            ELSE \'Not Closed\'::text        END AS notclosed,    rpt.estimatedamount AS feesest,    rpt.incurredamount AS feeswaived,    rpt.paidamount AS feespaid,    rd.disposition,    frccf.publication,    frccf.publicationreason,        CASE            WHEN rd.extension IS NULL THEN \'N\'::text            ELSE \'Y\'::text        END AS extension,    rd.execcomments,    frccf.noofpagesreleased AS noofpagesdelivered,    rdd.noofpagesintherequest,        CASE            WHEN EXTRACT(month FROM rd.receiveddate) >= 4::numeric AND EXTRACT(month FROM rd.receiveddate) <= 12::numeric THEN COALESCE(EXTRACT(year FROM rd.receiveddate)::text, \'\'::text) || COALESCE(EXTRACT(year FROM rd.receiveddate + \'1 year\'::interval)::text, \'\'::text)            WHEN EXTRACT(month FROM rd.receiveddate) IS NULL THEN \'\'::text            ELSE COALESCE(EXTRACT(year FROM rd.receiveddate + \'-1 years\'::interval)::text, \'\'::text) || COALESCE(EXTRACT(year FROM rd.receiveddate)::text, \'\'::text)        END AS startfyr,        CASE            WHEN EXTRACT(month FROM rd.closeddate) >= 4::numeric AND EXTRACT(month FROM rd.closeddate) <= 12::numeric THEN COALESCE(EXTRACT(year FROM rd.closeddate)::text, \'\'::text) || COALESCE(EXTRACT(year FROM rd.closeddate + \'1 year\'::interval)::text, \'\'::text)            WHEN EXTRACT(month FROM rd.closeddate) IS NULL THEN \'\'::text            ELSE COALESCE(EXTRACT(year FROM rd.closeddate + \'-1 years\'::interval)::text, \'\'::text) || COALESCE(EXTRACT(year FROM rd.closeddate)::text, \'\'::text)        END AS endfyr,        CASE            WHEN EXTRACT(month FROM rd.receiveddate) >= 4::numeric AND EXTRACT(month FROM rd.receiveddate) <= 6::numeric THEN 1            WHEN EXTRACT(month FROM rd.receiveddate) >= 7::numeric AND EXTRACT(month FROM rd.receiveddate) <= 9::numeric THEN 2            WHEN EXTRACT(month FROM rd.receiveddate) >= 10::numeric AND EXTRACT(month FROM rd.receiveddate) <= 12::numeric THEN 3            WHEN EXTRACT(month FROM rd.receiveddate) >= 1::numeric AND EXTRACT(month FROM rd.receiveddate) <= 3::numeric THEN 4            ELSE NULL::integer        END AS startfqtr,        CASE            WHEN EXTRACT(month FROM rd.closeddate) >= 4::numeric AND EXTRACT(month FROM rd.closeddate) <= 6::numeric THEN 1            WHEN EXTRACT(month FROM rd.closeddate) >= 7::numeric AND EXTRACT(month FROM rd.closeddate) <= 9::numeric THEN 2            WHEN EXTRACT(month FROM rd.closeddate) >= 10::numeric AND EXTRACT(month FROM rd.closeddate) <= 12::numeric THEN 3            WHEN EXTRACT(month FROM rd.closeddate) >= 1::numeric AND EXTRACT(month FROM rd.closeddate) <= 3::numeric THEN 4            ELSE NULL::integer        END AS endfqtr   FROM "factRequestDetails" rd     LEFT JOIN "dimRequests" r ON rd.foirequestid = r.foirequestid     LEFT JOIN "dimECGroups" ecg ON rd.primarygroupid = ecg.groupid     LEFT JOIN "dimECGroups" ecggn ON rd.groupname::text = ecggn.groupname::text     LEFT JOIN "dimECOffice" eco ON rd.officeid = eco.officeid     LEFT JOIN "dimRequestTypes" rt ON rd.requesttypeid = rt.requesttypeid     LEFT JOIN "dimRequesterTypes" rqt ON rd.applicantcategoryid = rqt.requestertypeid     LEFT JOIN "factRequestPaymentTransaction" rpt ON r.foirequestid = rpt.foirequestid AND rpt.activeflag = \'Y\'::bpchar     LEFT JOIN "factRequestDocumentsDetails" rdd ON r.foirequestid = rdd.foirequestid AND rdd.activeflag = \'Y\'::bpchar     LEFT JOIN "factRequestRequesters" rr ON r.foirequestid = rr.foirequestid AND rr.activeflag = \'Y\'::bpchar     LEFT JOIN "dimRequesters" req ON rr.requesterid = req.requesterid 	 LEFT JOIN "factRequestCustomCalcFields" frccf ON rd.foirequestid = frccf.foirequestid  WHERE rd.activeflag = \'Y\'::bpchar AND (eco.officecode::text <> ALL (ARRAY[\'IMB\'::character varying, \'IAO\'::character varying, \'XGR\'::character varying]::text[])) AND (rt.requesttypename::text = ANY (ARRAY[\'Consultation\'::character varying, \'Correction\'::character varying, \'General\'::character varying, \'Other\'::character varying, \'Personal\'::character varying, \'Review\'::character varying]::text[]));ALTER TABLE public.viw_analystworkloaddash    OWNER TO postgres;GRANT ALL ON TABLE public.viw_analystworkloaddash TO postgres;GRANT SELECT ON TABLE public.viw_analystworkloaddash TO redash_role;')


def downgrade():
    op.execute('DROP VIEW public.viw_analystworkloaddash; CREATE OR REPLACE VIEW public.viw_analystworkloaddash AS  SELECT r.foirequestid,    r.visualrequestfilenumber AS requestid,        CASE            WHEN ecg.groupname::text = \'Consolidated Intake\'::text THEN \'Intake\'::character varying            ELSE ecggn.groupname        END AS team,        CASE            WHEN ecg.groupname::text = \'Consolidated Intake\'::text THEN ecg.groupdescription            ELSE ecggn.groupdescription        END AS manager,    rd.ministry,    eco.officecode AS procorg,    rd.applicantcategoryid AS category,    rt.requesttypename AS type,    rqt.requestertypename AS applicanttype,    (req.lastname::text || \', \'::text) || req.firstname::text AS applicantname,    frccf.subject,    rd.startdate,    rd.closeddate AS enddate,    rd.targetdate AS duedate,    rd.processeddays AS totalprocesseddays,    rd.currentactivity,    frccf.currentactivitydate,    rd.primaryusername AS analyst,    frccf.crossgovtno,    rd.requestdescription AS description,    rd.status,	frccf.customfieldstatus as "Custom Status",    frccf.countontime,    frccf.countoverdue,    frccf.onholddays,    frccf.daysoverdue,        CASE            WHEN rd.requeststatus::text = \'Closed\'::text THEN \'Closed\'::text            ELSE \'Not Closed\'::text        END AS notclosed,    rpt.estimatedamount AS feesest,    rpt.incurredamount AS feeswaived,    rpt.paidamount AS feespaid,    rd.disposition,    frccf.publication,    frccf.publicationreason,        CASE            WHEN rd.extension IS NULL THEN \'N\'::text            ELSE \'Y\'::text        END AS extension,    rd.execcomments,    frccf.noofpagesreleased AS noofpagesdelivered,    rdd.noofpagesintherequest,        CASE            WHEN EXTRACT(month FROM rd.receiveddate) >= 4::numeric AND EXTRACT(month FROM rd.receiveddate) <= 12::numeric THEN COALESCE(EXTRACT(year FROM rd.receiveddate)::text, \'\'::text) || COALESCE(EXTRACT(year FROM rd.receiveddate + \'1 year\'::interval)::text, \'\'::text)            WHEN EXTRACT(month FROM rd.receiveddate) IS NULL THEN \'\'::text            ELSE COALESCE(EXTRACT(year FROM rd.receiveddate + \'-1 years\'::interval)::text, \'\'::text) || COALESCE(EXTRACT(year FROM rd.receiveddate)::text, \'\'::text)        END AS startfyr,        CASE            WHEN EXTRACT(month FROM rd.closeddate) >= 4::numeric AND EXTRACT(month FROM rd.closeddate) <= 12::numeric THEN COALESCE(EXTRACT(year FROM rd.closeddate)::text, \'\'::text) || COALESCE(EXTRACT(year FROM rd.closeddate + \'1 year\'::interval)::text, \'\'::text)            WHEN EXTRACT(month FROM rd.closeddate) IS NULL THEN \'\'::text            ELSE COALESCE(EXTRACT(year FROM rd.closeddate + \'-1 years\'::interval)::text, \'\'::text) || COALESCE(EXTRACT(year FROM rd.closeddate)::text, \'\'::text)        END AS endfyr,        CASE            WHEN EXTRACT(month FROM rd.receiveddate) >= 4::numeric AND EXTRACT(month FROM rd.receiveddate) <= 6::numeric THEN 1            WHEN EXTRACT(month FROM rd.receiveddate) >= 7::numeric AND EXTRACT(month FROM rd.receiveddate) <= 9::numeric THEN 2            WHEN EXTRACT(month FROM rd.receiveddate) >= 10::numeric AND EXTRACT(month FROM rd.receiveddate) <= 12::numeric THEN 3            WHEN EXTRACT(month FROM rd.receiveddate) >= 1::numeric AND EXTRACT(month FROM rd.receiveddate) <= 3::numeric THEN 4            ELSE NULL::integer        END AS startfqtr,        CASE            WHEN EXTRACT(month FROM rd.closeddate) >= 4::numeric AND EXTRACT(month FROM rd.closeddate) <= 6::numeric THEN 1            WHEN EXTRACT(month FROM rd.closeddate) >= 7::numeric AND EXTRACT(month FROM rd.closeddate) <= 9::numeric THEN 2            WHEN EXTRACT(month FROM rd.closeddate) >= 10::numeric AND EXTRACT(month FROM rd.closeddate) <= 12::numeric THEN 3            WHEN EXTRACT(month FROM rd.closeddate) >= 1::numeric AND EXTRACT(month FROM rd.closeddate) <= 3::numeric THEN 4            ELSE NULL::integer        END AS endfqtr   FROM "factRequestDetails" rd     LEFT JOIN "dimRequests" r ON rd.foirequestid = r.foirequestid     LEFT JOIN "dimECGroups" ecg ON rd.primarygroupid = ecg.groupid     LEFT JOIN "dimECGroups" ecggn ON rd.groupname::text = ecggn.groupname::text     LEFT JOIN "dimECOffice" eco ON rd.officeid = eco.officeid     LEFT JOIN "dimRequestTypes" rt ON rd.requesttypeid = rt.requesttypeid     LEFT JOIN "dimRequesterTypes" rqt ON rd.applicantcategoryid = rqt.requestertypeid     LEFT JOIN "factRequestPaymentTransaction" rpt ON r.foirequestid = rpt.foirequestid AND rpt.activeflag = \'Y\'::bpchar     LEFT JOIN "factRequestDocumentsDetails" rdd ON r.foirequestid = rdd.foirequestid AND rdd.activeflag = \'Y\'::bpchar     LEFT JOIN "factRequestRequesters" rr ON r.foirequestid = rr.foirequestid AND rr.activeflag = \'Y\'::bpchar     LEFT JOIN "dimRequesters" req ON rr.requesterid = req.requesterid 	 LEFT JOIN "factRequestCustomCalcFields" frccf ON rd.foirequestid = frccf.foirequestid  WHERE rd.activeflag = \'Y\'::bpchar AND (eco.officecode::text <> ALL (ARRAY[\'IMB\'::character varying, \'IAO\'::character varying, \'XGR\'::character varying]::text[])) AND (rt.requesttypename::text = ANY (ARRAY[\'Consultation\'::character varying, \'Correction\'::character varying, \'General\'::character varying, \'Other\'::character varying, \'Personal\'::character varying, \'Review\'::character varying]::text[]));ALTER TABLE public.viw_analystworkloaddash    OWNER TO postgres;GRANT ALL ON TABLE public.viw_analystworkloaddash TO postgres;GRANT SELECT ON TABLE public.viw_analystworkloaddash TO redash_role;')
